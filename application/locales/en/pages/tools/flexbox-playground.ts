import type { FlexboxPlaygroundTranslations } from "../../../types/pages/tools/flexbox-playground";

export const flexboxPlayground: FlexboxPlaygroundTranslations = {
  title: "Flexbox Playground",
  subtitle: "Visual CSS Flexbox Learning & Testing Tool",
  description:
    "An interactive tool to visually learn and test CSS Flexbox properties. Adjust container and item settings while generating Pure CSS, Tailwind CSS, and SCSS code automatically.",
  keywords: [
    "Flexbox",
    "CSS",
    "Layout",
    "Flexbox",
    "Tailwind",
    "SCSS",
    "Responsive Design",
  ],
  copy: "Copy",
  copied: "Copied",
  copiedToClipboard: "copied to clipboard",

  howToUse: {
    title: "How to Use",
    steps: [
      "Adjust Flexbox basic settings with container properties",
      "Add or remove items to see the preview",
      "Set individual item properties",
      "Copy generated CSS, Tailwind, or SCSS code",
    ],
  },

  features: {
    title: "Key Features",
    items: [
      "Real-time preview display",
      "Support for all Flexbox properties",
      "Pure CSS, Tailwind CSS, and SCSS code generation",
      "Dynamic item addition and removal",
      "Responsive preview support",
    ],
  },

  sections: {
    containerProperties: "Container Properties",
    itemProperties: "Item Properties",
    preview: "Preview",
    generatedCode: "Generated Code",
  },

  properties: {
    display: "Display",
    flexDirection: "Flex Direction",
    flexWrap: "Flex Wrap",
    justifyContent: "Justify Content",
    alignItems: "Align Items",
    alignContent: "Align Content",
    gap: "Gap",
    flexGrow: "Flex Grow",
    flexShrink: "Flex Shrink",
    flexBasis: "Flex Basis",
    alignSelf: "Align Self",
    order: "Order",
  },

  values: {
    display: {
      flex: "flex",
      inlineFlex: "inline-flex",
    },
    flexDirection: {
      row: "row (horizontal)",
      rowReverse: "row-reverse (horizontal reverse)",
      column: "column (vertical)",
      columnReverse: "column-reverse (vertical reverse)",
    },
    flexWrap: {
      nowrap: "nowrap (no wrapping)",
      wrap: "wrap (wrapping allowed)",
      wrapReverse: "wrap-reverse (reverse wrapping)",
    },
    justifyContent: {
      flexStart: "flex-start (start alignment)",
      flexEnd: "flex-end (end alignment)",
      center: "center (center alignment)",
      spaceBetween: "space-between (space between)",
      spaceAround: "space-around (space around)",
      spaceEvenly: "space-evenly (even spacing)",
    },
    alignItems: {
      stretch: "stretch (stretch items)",
      flexStart: "flex-start (start alignment)",
      flexEnd: "flex-end (end alignment)",
      center: "center (center alignment)",
      baseline: "baseline (baseline alignment)",
    },
    alignContent: {
      stretch: "stretch (stretch content)",
      flexStart: "flex-start (start alignment)",
      flexEnd: "flex-end (end alignment)",
      center: "center (center alignment)",
      spaceBetween: "space-between (space between)",
      spaceAround: "space-around (space around)",
      spaceEvenly: "space-evenly (even spacing)",
    },
    alignSelf: {
      auto: "auto (inherit)",
      stretch: "stretch (stretch item)",
      flexStart: "flex-start (start alignment)",
      flexEnd: "flex-end (end alignment)",
      center: "center (center alignment)",
      baseline: "baseline (baseline alignment)",
    },
  },

  codeFormat: {
    title: "Code Format",
    pureCss: "Pure CSS",
    tailwindCss: "Tailwind CSS",
    scss: "SCSS",
  },

  previewControls: {
    addItem: "Add Item",
    removeItem: "Remove Item",
    resetAll: "Reset All",
    selectedItem: "Selected Item",
  },

  faqList: [
    {
      q: "What is Flexbox?",
      a: "Flexbox is a layout method introduced in CSS3. It provides flexible features for arranging and aligning items within a container, making it ideal for responsive design.",
    },
    {
      q: "What's the difference between justify-content and align-items?",
      a: "justify-content controls alignment along the main axis, while align-items controls alignment along the cross axis. With flex-direction: row, justify-content affects horizontal alignment and align-items affects vertical alignment.",
    },
    {
      q: "What are flex-grow, flex-shrink, and flex-basis?",
      a: "flex-grow sets the growth rate when filling available space, flex-shrink sets the shrink rate when space is limited, and flex-basis sets the initial size. These can be combined using the flex shorthand property.",
    },
    {
      q: "How do I use Tailwind CSS Flexbox classes?",
      a: "Tailwind CSS uses utility classes like flex, flex-row, justify-center, and items-center to implement Flexbox layouts. You can use the class names generated by this tool directly.",
    },
    {
      q: "What are the benefits of using Flexbox for responsive design?",
      a: "Flexbox automatically adjusts item placement based on screen size. Using flex-wrap and flex-direction, you can achieve optimal layouts for different devices.",
    },
  ],
};
